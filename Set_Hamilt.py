import numpy as np

############################################
#### DEFINE HUBBARD HAMILTONIAN ############
#### TWO SITES SYSTEM ######################
#### HALF FILLING ##########################
############################################
def Hubbard_Hamilt_twosites( t, U, v ):
	
	####################################
	### INPUT1: t --- hopping term #####
	### INPUT2: U --- hubbard term #####
	### INPUT3: v --- ext. potential ###
	### OUTPUT: H --- hamiltonian ######
	####################################
	
	####################################
	### 1- | 1up, 1dn > ------- ########
	### 2- | 1up, 2dn > ------- ########
	### 3- | 1dn, 2up > ------- ########
	### 4- | 2up, 2dn > ------- ########
	####################################
	
	H = np.zeros((4, 4))
	H[0,0] = 2. * v[0] + U
	H[0,1] = -t
	H[0,2] = t
	H[1,0] = -t
	H[1,1] = v[0] + v[1]
	H[1,3] = -t
	H[2,0] = t
	H[2,2] = v[0] + v[1]
	H[2,3] = t
	H[3,1] = -t
	H[3,2] = t
	H[3,3] = 2. * v[1] + U
	
	return H
	
def KS_Hamilt_twosites( t, U, v, n ):
	
	####################################
	### INPUT1: t --- hopping term #####
	### INPUT2: U --- Coulomb int. #####
	### INPUT3: v --- ext. potential ###
	### INPUT4: n --- site density #####
	### OUTPUT: H --- hamiltonian ######
	####################################
	
	##################################################
	### KS HAMILTONIAN     ###########################
	### Hks = -t(c1^+ c2 + hc) + \sum_i vks_i(ni) ####
	### vks_i(ni)=U/2 n_i\hat{n}_i + vc(i)\hat{n}_i ##
	### + v(i)\hat{n}_i    ###########################
	##################################################
	### vc(i)=5/8 U^2 (ni - 1) [1 - (ni -1)^2]^{3/2}##
	##################################################
	
	### SET UP HAMILTONIAN + KS POTENTIAL ############
	H = np.zeros((2, 2))
	vks = np.zeros(2)
	vc = np.zeros(2)
	
	vc[:] = 5./8 * U ** 2  * (n[:] - 1.) * (1. - (n[:] - 1.) ** 2) ** (3./2)
	vks[:] = v[:] + U / 2. * n[:] + vc[:]
	H[0,0] = vks[0]
	H[0,1] = -t
	H[1,0] = -t
	H[1,1] = vks[1]
	
	return H
	
def HF_Hamilt_twosites( t, U, v, n ):
	
	####################################
	### INPUT1: t --- hopping term #####
	### INPUT2: U --- Coulomb int. #####
	### INPUT3: v --- ext. potential ###
	### INPUT4: n --- site density #####
	### OUTPUT: H --- hamiltonian ######
	####################################
	
	##################################################
	### HF HAMILTONIAN     ###########################
	### Hhf = -t(c1^+ c2 + hc) + \sum_i vhf_i(ni) ####
	### vhf_i(ni)=U/2 n_i\hat{n}_i + v(i)\hat{n}_i ###
	##################################################
	
	### SET UP HAMILTONIAN + HF POTENTIAL ############
	H = np.zeros((2, 2))
	H[0,0] = v[0] + U / 2. * n[0]
	H[0,1] = -t
	H[1,0] = -t
	H[1,1] = v[1] + U / 2. * n[1]
	
	return H
	
def Hubbard_Hamilt_twosites_elph(t, U, v, g, xi, R, w):
	
	####################################
	### INPUT1: t --- hopping term #####
	### INPUT2: U --- Coulomb int. #####
	### INPUT3: v --- ext. potential ###
	### INPUT4: g --- e-ph coupling ####
	### INPUT5: xi--- corr. length #####
	### INPUT6: R --- dist. atoms ######
	### INPUT7: w --- phonon freq. #####
	### OUTPUT: H --- hamiltonian ######
	####################################
	
	def G(i):
		return -g * np.exp(-abs(R*i)/xi) / (1. + (i*R)**2)**(3./2)
		
	#######################################################
	### H = -t(c1^+ c2 + h.c.) + \sum_i U n_iup n_idn +  ##
	### \sum_i vext(i) n(i) + w \sum_r n_r-ph +          ##
	### \sum_i,R G(R) sqrt(2) Xi n_i+R               ######
	#######################################################
	
	## consider only states with up to 2 phonons ##########
	## |0p> , |1p >, |2p >, |1p,2p>, |1p,1p>, |2p,2p> #####
	## w = t/2 ############################################
	## free parameters: t, U, v, g, xi ####################
	## 24 states for the Hamiltonian ######################
	## G(R) = g exp(-|R|/xi)/(1+R^2)^(3/2) ################
	## 0) |1up, 1dn, 0p>  #################################
	## 1) |1up, 1dn, 1p>  #################################
	## 2) |1up, 1dn, 2p>  #################################
	## 3) |1up, 1dn, 1p, 2p>  #############################
	## 4) |1up, 1dn, 1p, 1p>  #############################
	## 5) |1up, 1dn, 2p, 2p>  #############################
	## 6) |1up, 2dn, 0p>  #################################
	## 7) |1up, 2dn, 1p>  #################################
	## 8) |1up, 2dn, 2p>  #################################
	## 9) |1up, 2dn, 1p, 2p> ##############################
	## 10)|1up, 2dn, 1p, 1p> ##############################
	## 11)|1up, 2dn, 2p, 2p> ##############################
	## 12)|1dn, 2up, 0p>  #################################
	## 13)|1dn, 2up, 1p>  #################################
	## 14)|1dn, 2up, 2p>  #################################
	## 15)|1dn, 2up, 1p, 2p> ##############################
	## 16)|1dn, 2up, 1p, 1p> ##############################
	## 17)|1dn, 2up, 2p, 2p> ##############################
	## 18)|2up, 2dn, 0p>  #################################
	## 19)|2up, 2dn, 1p>  #################################
	## 20)|2up, 2dn, 2p>  #################################
	## 21)|2up, 2dn, 1p, 2p> ##############################
	## 22)|2up, 2dn, 1p, 1p> ##############################
	## 23)|2up, 2dn, 2p, 2p> ##############################
	#######################################################
	
	H = np.zeros((24, 24))
	# |1up, 1dn>
	H[0,0] = 2. * v[0] + U
	H[0,1] = 2. * G(0)
	H[0,2] = 2. * G(-1)
	H[0,6] =-t
	H[0,12]= t
	H[1,1] = 2. * v[0] + U + w
	H[1,3] = 2. * G(-1)
	H[1,4] = np.sqrt(2.) * 2. * G(0)
	H[1,7] =-t
	H[1,13]= t
	H[2,2] = 2. * v[0] + U + w
	H[2,3] = 2. * G(0)
	H[2,5] = np.sqrt(2.) * 2. * G(-1)
	H[2,8] =-t
	H[2,14]= t
	H[3,3] = 2. * v[0] + U + 2. * w
	H[3,9] =-t
	H[3,15]= t
	H[4,4] = 2. * v[0] + U + 2. * w
	H[4,10]=-t
	H[4,16]= t
	H[5,5] = 2. * v[0] + U + 2. * w
	H[5,11]=-t
	H[5,17]= t
	# |1up, 2dn>
	H[6,6] = v[0] + v[1]
	H[6,7] = G(0) + G(1)
	H[6,8] = G(-1) + G(0)
	H[6,18]=-t
	H[7,7] = v[0] + v[1] + w
	H[7,9] = G(0) + G(-1)
	H[7,10]= np.sqrt(2.) * (G(0) + G(1))
	H[7,19]=-t
	H[8,8] = v[0] + v[1] + w
	H[8,9] = G(0) + G(1)
	H[8,11]= np.sqrt(2) * (G(0) + G(-1))
	H[8,20]=-t
	H[9,9] = v[0] + v[1] + 2.*w
	H[9,21]=-t
	H[10,10]= v[0] + v[1] + 2.*w
	H[10,22]=-t
	H[11,11]= v[0] + v[1] + 2.*w
	H[11,23]=-t
	# |1dn, 2up>
	H[12,12]= v[0] + v[1]
	H[12,13]= G(0) + G(1)
	H[12,14]= G(-1) + G(0)
	H[12,18]= t
	H[13,13]= v[0] + v[1] + w
	H[13,15]= G(-1) + G(0)
	H[13,16]= np.sqrt(2) * (G(1) + G(0))
	H[13,19]= t
	H[14,14]= v[0] + v[1] + w
	H[14,15]= G(0) + G(1)
	H[14,17]= np.sqrt(2) * (G(0) + G(-1))
	H[14,20]= t
	H[15,15]= v[0] + v[1] + 2.*w
	H[15,21]= t
	H[16,16]= v[0] + v[1] + 2.*w
	H[16,22]= t
	H[17,17]= v[0] + v[1] + 2.*w
	H[17,23]= t
	# |2up, 2dn>
	H[18,18]= 2 * v[1] + U
	H[18,19]= 2. * G(1)
	H[18,20]= 2. * G(0)
	H[19,19]= 2 * v[1] + U + w
	H[19,21]= G(0)
	H[19,22]= 2. * np.sqrt(2) * G(1)
	H[20,20]= 2 * v[1] + U + w
	H[20,21]= 2. * G(1)
	H[20,23]= 2. * np.sqrt(2) * G(0)
	H[21,21]= 2 * v[1] + U + 2. * w
	H[22,22]= 2 * v[1] + U + 2. * w
	H[23,23]= 2 * v[1] + U + 2. * w
	
	return H
	
#######################################################################
#### Hubbard - Two-Level model Hamiltonian  ###########################
#######################################################################
def Hubbard_Two_Level( t, U, v, d ):
	###############################################################
	### INPUT 1: t  ---  Hopping term #############################
	### INPUT 2: U  ---  Hubbard term #############################
	### INPUT 3: v  ---  external potential #######################
	### INPUT 4: E  ---  energy level #############################
	### OUTPUT : H  ---  Hamiltonian ##############################
	###############################################################
	
	###############################################################
	## H = -t (c^+_1s(n1) c_2s(n1) + H.c.) + U \sum_i n_iu n_id ###
	## + \sum_i v(i) n(i) + \sum_i E(i) c^+_is(n2) c_is(n2) #######
	###############################################################
	return 0
